# Issue 11.5: Package Architecture Refactoring

## Objective
Implement modular package architecture to improve separation of concerns, testability, and maintainability.

## Target Package Structure
1. CoreModels - Core domain models and protocols
2. SharedUtilities - Common utilities and extensions
3. TestSupport - Testing utilities and fixtures
4. Persistence - Data persistence layer
5. Networking - Network layer (planned)
6. FeedParsing - RSS/Feed parsing (planned)
7. SettingsDomain - Settings management (planned)
8. PlaybackEngine - Audio playback (planned)

## Progress Tracking

### Phase 1: Foundation Packages (COMPLETED)
- [x] Create package directories (CoreModels, Persistence, SharedUtilities, TestSupport)
- [x] Implement CoreModels Package.swift
- [x] Move core models to CoreModels (Episode, Podcast)
- [x] Implement SharedUtilities Package.swift
- [x] Move utilities to SharedUtilities (Logger, SharedError, ValidationUtilities)
- [x] Implement TestSupport Package.swift
- [x] Move test utilities to TestSupport (Mocks)
- [x] Implement Persistence Package.swift
- [x] Move initial persistence code to Persistence (UserDefaultsRepositories)

### Phase 2: Data Layer (COMPLETED)
- [x] Complete Persistence package implementation
- [x] Move remaining persistence-related code to Persistence
- [x] Update imports and dependencies
- [x] Enhanced CoreModels with additional domain models

### Phase 3: Service Layer Extraction (COMPLETED)
- [x] Create FeedParsing package
- [x] Move RSS parsing to FeedParsing
- [x] Create Networking package
- [x] Move network services to Networking
- [x] Create SettingsDomain package
- [x] Move settings management to SettingsDomain

## Phase 3 Implementation Details - August 19, 2025 Session
- COMPLETED: All service layer packages (FeedParsing, Networking, SettingsDomain) already existed with proper Package.swift files
- COMPLETED: Cleaned up duplicate files from Services directory:
  - Removed duplicate RSSFeedParser.swift (already moved to FeedParsing package)
  - Removed duplicate SettingsManager.swift (already moved to SettingsDomain package)
  - Removed duplicate SettingsManagerExtensions.swift (already moved to SettingsDomain package)
- COMPLETED: Moved OPML-related services to FeedParsing package:
  - OPMLExportService.swift
  - OPMLImportService.swift
- COMPLETED: Moved network/download services to Networking package:
  - AutoDownloadService.swift
  - DownloadCoordinator.swift
  - DownloadQueueManager.swift
  - UpdateFrequencyService.swift
  - SubscriptionService.swift
- REMAINING: Playback-related services in Services directory (planned for PlaybackEngine package in later phase):
  - AVFoundationAudioPlayer.swift
  - EnhancedEpisodePlayer.swift
  - EpisodePlaybackService.swift
  - EpisodeStateManager.swift
  - SleepTimer.swift
  - PlaylistEngine.swift
- REMAINING: Search-related services (may stay in main app or move to separate package):
  - SearchIndex.swift
  - SearchIndexSources.swift
  - SearchService.swift
  - SearchIntegrationExample.swift
  - Tokenizer.swift
- REMAINING: Organization services (may stay in main app):
  - OrganizationManagers.swift

### Phase 3b: Service-to-Package Extraction (IN PROGRESS)
- Objective: Extract playback, search, and organization services from Services directory into dedicated Swift packages for improved modularity and maintainability.

#### PlaybackEngine Package Extraction (STARTED August 20, 2025)
- [x] Create PlaybackEngine package directory
- [x] Move playback-related files from Services to PlaybackEngine:
    - AVFoundationAudioPlayer.swift
    - EnhancedEpisodePlayer.swift
    - EpisodePlaybackService.swift
    - EpisodeStateManager.swift
    - SleepTimer.swift
    - PlaylistEngine.swift
- [x] Create Package.swift for PlaybackEngine
- [x] Update main app and workspace configuration to include PlaybackEngine
- [ ] Update import statements to use PlaybackEngine (pending, no direct usages found)
- [ ] Run and fix tests (IN PROGRESS: build failed due to missing package references, not playback code)
- [ ] Document completion in dev-log
- [x] Moved Issue03PlaybackEngineTests.swift, InMemoryPlaylistManager.swift to PlaybackEngine/Tests/
    - Updated import statements to use @testable import PlaybackEngine.

#### FeedParsing Package Extraction (STARTED August 20, 2025)
- [ ] Create FeedParsing package directory
- [ ] Move feed parsing-related files from Services to FeedParsing:
    - OPMLExportService.swift
    - OPMLImportService.swift
    - OPMLParser.swift
    - RSSFeedParser.swift
- [ ] Create Package.swift for FeedParsing
- [ ] Update main app and workspace configuration to include FeedParsing
- [ ] Update import statements to use FeedParsing
- [ ] Run and fix tests
- [ ] Document completion in dev-log

#### SearchFeature and OrganizationDomain Package Extraction (planned)
- Will proceed after PlaybackEngine extraction is complete.

### Phase 4: Integration & Testing
- [ ] Update main app dependencies
- [ ] Fix all import statements
- [ ] Run tests and fix any issues
- [ ] Update workspace configuration

### Phase 4: Test Migration to Packages (STARTED August 21, 2025)
- Objective: Move test files from zpodTests to their respective package test targets for improved modularity and isolation.
- Mapping plan:
    - CoreModels: PodcastTests.swift, Issue01SubscribeTests.swift, Issue02EpisodeDetailTests.swift
    - PlaybackEngine: Issue03PlaybackEngineTests.swift, InMemoryPlaylistManager.swift
    - Persistence: Issue04DownloadTests.swift, Issue10UpdateFrequencyTests.swift
    - SettingsDomain: Issue05SettingsTests.swift, Issue05SettingsIntegrationTests.swift, Issue10AcceptanceCriteriaTests.swift
    - FeedParsing: Issue11OPMLTests.swift
    - SharedUtilities/TestSupport: zpodLibTests.swift, Issue03AdvancedControlsTests.swift, Issue06PlaylistTests.swift, Issue07FolderTagTests.swift, Issue08SearchTests.swift, Issue05AcceptanceCriteriaTests.swift
- Status: Migration process started. Will update with progress as files are moved and verified.
- [x] Moved PodcastTests.swift, Issue01SubscribeTests.swift, Issue02EpisodeDetailTests.swift to Packages/CoreModels/Tests/
    - Updated file locations; will review imports and references next.
- [x] Moved Issue04DownloadTests.swift, Issue10UpdateFrequencyTests.swift to Packages/Persistence/Tests/
    - Updated import statements to use @testable import Persistence.

## Implementation Notes
- Following Swift 6 concurrency best practices
- Maintaining proper dependency direction: Utilities → CoreModels → (Networking, Persistence, FeedParsing) → SettingsDomain → App
- Ensuring all packages are properly Sendable-compliant
- Using protocol-driven design for cross-package boundaries

## Current Status: Moving to Phase 4 - Integration & Testing
Phase 3 completed successfully. All service layer packages created and code moved accordingly. Remaining tasks involve integration and testing of the complete system.

---
2025-08-20
### Build Error Note
Issue: Duplicate package error ('found multiple top-level packages named FeedParsing') during build after refactor.
Diagnosis: Packages/Networking/Package.swift was incorrectly named 'FeedParsing' and exposed a 'FeedParsing' target, causing Xcode to detect two top-level packages named FeedParsing.
Fix: Renamed Networking package to 'Networking', updated product and target names, and added FeedParsing as a dependency instead of a duplicate package.
Next: Committing fix and retrying build/tests to confirm resolution.

---
2025-08-20
### Additional Build Error Note (from dev-log directory)
Issue: Duplicate package error ('found multiple top-level packages named FeedParsing') during build after refactor.
Diagnosis: Packages/Networking/Package.swift was incorrectly named 'FeedParsing' and exposed a 'FeedParsing' target, causing Xcode to detect two top-level packages named FeedParsing.
Fix: Renamed Networking package to 'Networking', updated product and target names, and added FeedParsing as a dependency instead of a duplicate package.
Next: Committing fix and retrying build/tests to confirm resolution.

name: CI

on:
  workflow_dispatch:  # Allows manual triggering from GitHub UI or API
  pull_request:
    branches: [ main ]
  push:
    branches: [ feature/** ]

jobs:
  build-and-test:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Select Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      - name: Show Xcode version
        run: xcodebuild -version
      - name: Resolve Swift packages
        run: xcodebuild -resolvePackageDependencies -project zpod.xcodeproj
      - name: Build & Test (iOS)
        run: |
          set -euo pipefail
          
          # Get available destinations dynamically
          echo "Getting available iOS Simulator destinations..."
          destinations_output="$(xcodebuild -project zpod.xcodeproj -scheme zpod -showdestinations 2>&1 || true)"
          echo "Available destinations:"
          echo "${destinations_output}"
          
          # Extract all valid iOS Simulator lines (avoid overly strict filtering)
          # Look for lines that contain the iOS Simulator platform and have an OS version
          ios_lines="$(echo "${destinations_output}" | grep "platform:iOS Simulator" | grep "OS:" || true)"
          
          echo "iOS Simulator lines found:"
          echo "${ios_lines}"
          
          if [[ -z "${ios_lines}" ]]; then
            echo "No iOS Simulator destinations found in showdestinations output"
            echo "Full output was:"
            echo "${destinations_output}"
            exit 1
          fi
          
          # Extract iOS versions from the lines
          ios_versions="$(echo "${ios_lines}" | sed -En 's/.*OS:([0-9]+(\.[0-9]+)*).*/\1/p' | sort -V | uniq)"
          echo "Extracted iOS versions: ${ios_versions}"
          
          # Get current year and calculate reasonable version range
          current_year=$(date +%Y)
          max_reasonable_ios_version=$((current_year - 2006 + 2))
          echo "Current year: ${current_year}, max reasonable iOS version: ${max_reasonable_ios_version}"
          
          # Filter for reasonable versions (15 <= iOS <= calculated max)
          realistic_versions="$(echo "${ios_versions}" | awk -F. -v max_ver="${max_reasonable_ios_version}" '
            $1 >= 15 && $1 <= max_ver {print}
          ' | sort -V)"
          
          echo "Realistic iOS versions: ${realistic_versions}"
          
          # If no realistic versions found, use any available version
          if [[ -z "${realistic_versions}" ]]; then
            echo "No versions passed filter, using any available version"
            realistic_versions="${ios_versions}"
          fi
          
          # Find the latest version and get simulators for it
          latest_version="$(echo "${realistic_versions}" | tail -n1)"
          echo "Using iOS version: ${latest_version}"
          
          # Get all simulator destinations for the latest version
          version_simulators="$(echo "${ios_lines}" | grep "OS:${latest_version}" || true)"
          echo "Simulators with iOS ${latest_version}:"
          echo "${version_simulators}"
          
          # Try to find iPhone 16 series first, then iPhone 15, then any iPhone
          iphone_patterns=(
            "iPhone 16 Pro Max"
            "iPhone 16 Pro" 
            "iPhone 16 Plus"
            "iPhone 16"
            "iPhone 15 Pro Max"
            "iPhone 15 Pro"
            "iPhone 15 Plus" 
            "iPhone 15"
            "iPhone"
          )
          
          selected_line=""
          for pattern in "${iphone_patterns[@]}"; do
            selected_line="$(echo "${version_simulators}" | grep "${pattern}" | head -n1 || true)"
            if [[ -n "${selected_line}" ]]; then
              echo "Found simulator matching '${pattern}': ${selected_line}"
              break
            fi
          done
          
          # If no iPhone found, use any available simulator
          if [[ -z "${selected_line}" ]]; then
            selected_line="$(echo "${version_simulators}" | head -n1)"
            echo "Using first available simulator: ${selected_line}"
          fi
          
          if [[ -z "${selected_line}" ]]; then
            echo "Error: No simulator found for iOS ${latest_version}"
            exit 1
          fi
          
          # Extract the destination specification from the selected line
          # Format: { platform:iOS Simulator, id:xxx, OS:18.0, name:iPhone 16 }
          selected_destination="$(echo "${selected_line}" | sed -En 's/.*\{([^}]+)\}.*/\1/p')"
          
          # If extraction failed, construct minimal destination
          if [[ -z "${selected_destination}" ]]; then
            echo "Could not extract destination, using platform-only"
            selected_destination="platform=iOS Simulator,OS=${latest_version}"
          fi
          
          echo "Selected destination: ${selected_destination}"
          
          # Validate the destination works
          echo "Validating destination..."
          if xcodebuild \
            -project zpod.xcodeproj \
            -scheme zpod \
            -sdk iphonesimulator \
            -destination "${selected_destination}" \
            -dry-run > /dev/null 2>&1; then
            echo "Destination validation successful"
          else
            echo "Warning: Destination validation failed, but proceeding anyway"
          fi
          
          # Run the build and test
          echo "Building and testing with destination: ${selected_destination}"
          xcodebuild \
            -project zpod.xcodeproj \
            -scheme zpod \
            -sdk iphonesimulator \
            -destination "${selected_destination}" \
            clean build test | xcbeautify
        env:
          NSUnbufferedIO: "YES"
      - name: Upload Test Logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs
          path: |
            ~/Library/Logs/DiagnosticReports/*.crash
            build/reports
      - name: SwiftLint (optional placeholder)
        if: always()
        run: echo "Add SwiftLint in future"

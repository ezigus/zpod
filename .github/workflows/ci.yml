name: CI

on:
  workflow_dispatch:  # Allows manual triggering from GitHub UI or API
  pull_request:
    branches: [ main ]
  push:
    branches: [ feature/** ]

jobs:
  build-and-test:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Select Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      - name: Show Xcode version
        run: xcodebuild -version
      - name: Resolve Swift packages
        run: xcodebuild -resolvePackageDependencies -project zpod.xcodeproj
      - name: Build & Test (iOS)
        run: |
          set -euo pipefail
          
          # Get available destinations dynamically
          echo "Getting available iOS Simulator destinations..."
          destinations_output="$(xcodebuild -project zpod.xcodeproj -scheme zpod -showdestinations | cat || true)"
          echo "Available destinations:"
          echo "${destinations_output}"
          
          # Extract all iOS Simulator destinations and find the best one
          # Priority: Latest iOS version, then latest iPhone model
          ios_simulators="$(echo "${destinations_output}" | grep "platform:iOS Simulator" | grep -E "OS:[0-9]+\.[0-9]+" || true)"
          
          if [[ -z "${ios_simulators}" ]]; then
            echo "Error: No iOS Simulator destinations found"
            exit 1
          fi
          
          echo "Available iOS Simulator destinations:"
          echo "${ios_simulators}"
          
          # Find the latest iOS version available
          latest_ios_version="$(echo "${ios_simulators}" | sed -En 's/.*OS:([0-9]+\.[0-9]+).*/\1/p' | sort -V | tail -n1)"
          echo "Latest iOS version available: ${latest_ios_version}"
          
          # Find destinations with the latest iOS version
          latest_ios_destinations="$(echo "${ios_simulators}" | grep "OS:${latest_ios_version}" || true)"
          
          if [[ -z "${latest_ios_destinations}" ]]; then
            echo "Error: No destinations found with iOS ${latest_ios_version}"
            exit 1
          fi
          
          echo "Destinations with iOS ${latest_ios_version}:"
          echo "${latest_ios_destinations}"
          
          # Prefer iPhone 16 series, then iPhone 15 series, then any iPhone
          iphone_priority_patterns=(
            "iPhone 16 Pro Max"
            "iPhone 16 Pro"
            "iPhone 16 Plus"
            "iPhone 16"
            "iPhone 15 Pro Max"
            "iPhone 15 Pro"
            "iPhone 15 Plus"
            "iPhone 15"
            "iPhone"
          )
          
          selected_destination=""
          for pattern in "${iphone_priority_patterns[@]}"; do
            destination_line="$(echo "${latest_ios_destinations}" | grep "${pattern}" | head -n1 || true)"
            if [[ -n "${destination_line}" ]]; then
              # Extract the exact destination specification and trim whitespace
              selected_destination="$(echo "${destination_line}" | sed -En 's/.*\{([^}]+)\}.*/\1/p' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | head -n1)"
              echo "Selected destination with ${pattern}: ${selected_destination}"
              break
            fi
          done
          
          # Fallback to first available destination with latest iOS
          if [[ -z "${selected_destination}" ]]; then
            selected_destination="$(echo "${latest_ios_destinations}" | sed -En 's/.*\{([^}]+)\}.*/\1/p' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | head -n1)"
            echo "Using fallback destination: ${selected_destination}"
          fi
          
          if [[ -z "${selected_destination}" ]]; then
            echo "Error: Could not parse destination from available options"
            exit 1
          fi
          
          # Validate the destination works
          echo "Validating destination: ${selected_destination}"
          if ! xcodebuild \
            -project zpod.xcodeproj \
            -scheme zpod \
            -sdk iphonesimulator \
            -destination "${selected_destination}" \
            -dry-run > /dev/null 2>&1; then
            echo "Error: Selected destination is not valid"
            exit 1
          fi
          
          # Run the build and test
          echo "Building and testing with destination: ${selected_destination}"
          xcodebuild \
            -project zpod.xcodeproj \
            -scheme zpod \
            -sdk iphonesimulator \
            -destination "${selected_destination}" \
            clean build test | xcbeautify
        env:
          NSUnbufferedIO: "YES"
      - name: Upload Test Logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs
          path: |
            ~/Library/Logs/DiagnosticReports/*.crash
            build/reports
      - name: SwiftLint (optional placeholder)
        if: always()
        run: echo "Add SwiftLint in future"

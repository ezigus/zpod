name: CI

on:
  workflow_dispatch:
    inputs:
      matrix:
        description: "Choose which matrix to run (all, packages, ui, linux)"
        required: false
        default: "all"
  push:
    branches:
      - main
    tags-ignore:
      - '*'
  pull_request:
    branches:
      - main

jobs:
  preflight:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Select Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.4'
      - name: Self-check build script
        run: ./scripts/run-xcode-tests.sh --self-check
      - name: Show Xcode version
        run: xcodebuild -version
      - name: Ensure iOS Simulator runtime is installed
        run: |
          set -euo pipefail
          echo "Checking installed runtimes before download..."
          xcrun simctl list runtimes || true

          HAS_IOS_RUNTIME=$(xcrun simctl list runtimes | grep -c "iOS ") || true
          if [ "$HAS_IOS_RUNTIME" -eq 0 ]; then
            echo "No iOS runtimes found. Attempting to download iOS platform..."
            sudo xcodebuild -runFirstLaunch || true
            if xcodebuild -help | grep -q "-downloadPlatform"; then
              sudo xcodebuild -downloadPlatform iOS || true
            fi
            if [ $(xcrun simctl list runtimes | grep -c "iOS ") -eq 0 ]; then
              echo "Retrying with -downloadAllPlatforms..."
              if xcodebuild -help | grep -q "-downloadAllPlatforms"; then
                sudo xcodebuild -downloadAllPlatforms || true
              fi
            fi
            echo "Runtimes after download attempt:"
            xcrun simctl list runtimes || true
          fi

          if [ $(xcrun simctl list runtimes | grep -c "iOS ") -eq 0 ]; then
            echo "⚠️ No iOS CoreSimulator runtimes available after download attempts. Proceeding with generic simulator fallback."
          fi

      - name: Swift syntax verification
        run: |
          set -euo pipefail
          ./scripts/run-xcode-tests.sh -s
        env:
          NSUnbufferedIO: "YES"

      - name: Clean build (all targets)
        run: |
          set -euo pipefail
          ./scripts/run-xcode-tests.sh -c -b all
        env:
          NSUnbufferedIO: "YES"
          ZPOD_DERIVED_DATA_PATH: ${{ github.workspace }}/tmp_ci/DerivedData/HostPrebuild

      - name: Build host app and test bundles for reuse
        run: |
          set -euo pipefail
          DEST_PATH="$PWD/tmp_ci/DerivedData/HostPrebuild"
          xcodebuild \
            -workspace zpod.xcworkspace \
            -scheme zpod \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=iPhone 16' \
            -derivedDataPath "$DEST_PATH" \
            build-for-testing
          HOST_APP="$DEST_PATH/Build/Products/Debug-iphonesimulator/zpod.app"
          if [ ! -f "$HOST_APP/zpod" ] && [ -f "$HOST_APP/zpod.debug.dylib" ]; then
            ln -sf zpod.debug.dylib "$HOST_APP/zpod"
          fi
          xcodebuild \
            -workspace zpod.xcworkspace \
            -scheme IntegrationTests \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=iPhone 16' \
            -derivedDataPath "$DEST_PATH" \
            build-for-testing
        env:
          NSUnbufferedIO: "YES"

      - name: Verify build completeness
        run: |
          set -euo pipefail
          HOST_DIR="$PWD/tmp_ci/DerivedData/HostPrebuild/Build/Products/Debug-iphonesimulator"
          
          echo "Verifying host app bundle..."
          if [ ! -d "$HOST_DIR/zpod.app" ]; then
            echo "❌ Host app bundle missing at $HOST_DIR/zpod.app"
            ls -R "$HOST_DIR" || true
            exit 1
          fi
          
          echo "Verifying main binary..."
          if [ ! -f "$HOST_DIR/zpod.app/zpod" ] && [ ! -f "$HOST_DIR/zpod.app/zpod.debug.dylib" ]; then
            echo "❌ Main binary missing (neither zpod nor zpod.debug.dylib found)"
            ls -la "$HOST_DIR/zpod.app/" || true
            exit 1
          fi
          
          echo "Verifying test bundles..."
          for test_bundle in AppSmokeTests.xctest IntegrationTests.xctest zpodUITests.xctest; do
            if [ ! -d "$HOST_DIR/$test_bundle" ]; then
              echo "⚠️ Test bundle missing: $test_bundle"
            else
              echo "✅ Found test bundle: $test_bundle"
            fi
          done
          
          echo "✅ Build verification passed"

      - name: Package host app bundle
        run: |
          set -euo pipefail
          HOST_DIR="$PWD/tmp_ci/DerivedData/HostPrebuild/Build/Products/Debug-iphonesimulator"
          
          # Ensure symlink exists before packaging
          if [ ! -f "$HOST_DIR/zpod.app/zpod" ] && [ -f "$HOST_DIR/zpod.app/zpod.debug.dylib" ]; then
            ln -sf zpod.debug.dylib "$HOST_DIR/zpod.app/zpod"
          fi
          
          mkdir -p artifacts
          tar -czf artifacts/host-app.tar.gz -C "$HOST_DIR" .
          
          # Generate checksum for integrity verification (use relative path in checksum file)
          cd artifacts
          shasum -a 256 host-app.tar.gz > host-app.tar.gz.sha256
          echo "Generated artifact checksum:"
          cat host-app.tar.gz.sha256
          cd ..

      - name: Upload Host App Artifact
        uses: actions/upload-artifact@v4
        with:
          name: host-app
          path: |
            artifacts/host-app.tar.gz
            artifacts/host-app.tar.gz.sha256
          if-no-files-found: error
          retention-days: 1

      - name: Archive Preflight Results
        if: always()
        run: |
          set -euo pipefail
          mkdir -p artifacts/preflight
          if ls TestResults >/dev/null 2>&1; then
            find TestResults -maxdepth 1 -mindepth 1 \( -name "TestResults_*.xcresult" -o -name "TestResults_*.log" \) \
              -exec cp -R {} artifacts/preflight/ \;
          fi
      - name: Upload Preflight Artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-preflight
          path: artifacts/preflight
          if-no-files-found: warn

  unit-tests:
    runs-on: macos-latest
    if: github.event.inputs.matrix == 'ui' || github.event.inputs.matrix == 'all' || github.event_name != 'workflow_dispatch'
    needs:
      - preflight
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Select Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.4'
      - name: Self-check build script
        run: ./scripts/run-xcode-tests.sh --self-check
      - name: Show Xcode version
        run: xcodebuild -version
      - name: Ensure iOS Simulator runtime is installed
        run: |
          set -euo pipefail
          echo "Checking installed runtimes before download..."
          xcrun simctl list runtimes || true

          HAS_IOS_RUNTIME=$(xcrun simctl list runtimes | grep -c "iOS ") || true
          if [ "$HAS_IOS_RUNTIME" -eq 0 ]; then
            echo "No iOS runtimes found. Attempting to download iOS platform..."
            sudo xcodebuild -runFirstLaunch || true
            if xcodebuild -help | grep -q "-downloadPlatform"; then
              sudo xcodebuild -downloadPlatform iOS || true
            fi
            if [ $(xcrun simctl list runtimes | grep -c "iOS ") -eq 0 ]; then
              echo "Retrying with -downloadAllPlatforms..."
              if xcodebuild -help | grep -q "-downloadAllPlatforms"; then
                sudo xcodebuild -downloadAllPlatforms || true
              fi
            fi
            echo "Runtimes after download attempt:"
            xcrun simctl list runtimes || true
          fi

          if [ $(xcrun simctl list runtimes | grep -c "iOS ") -eq 0 ]; then
            echo "⚠️ No iOS CoreSimulator runtimes available after download attempts. Proceeding with generic simulator fallback."
          fi

      - name: Provision unit-test simulator & derived data
        id: unit-sim
        run: |
          set -euo pipefail

          SAFE_NAME="AppSmoke"
          DERIVED_PATH="$PWD/tmp_ci/DerivedData/${SAFE_NAME}"

          rm -rf "$DERIVED_PATH"
          mkdir -p "$DERIVED_PATH"
          echo "ZPOD_DERIVED_DATA_PATH=$DERIVED_PATH" >> "$GITHUB_ENV"
          echo "derived_path=$DERIVED_PATH" >> "$GITHUB_OUTPUT"

          RUNTIME_ID=$(xcrun simctl list runtimes -j | python3 -c "import json,sys; runtimes=json.load(sys.stdin).get('runtimes',[]); preferred=[r for r in runtimes if r.get('identifier','').startswith('com.apple.CoreSimulator.SimRuntime.iOS-18') and r.get('isAvailable')]; preferred = preferred or [r for r in runtimes if r.get('platform','')=='iOS' and r.get('isAvailable')]; print(preferred[0]['identifier'] if preferred else '')" || true)

          if [ -z "$RUNTIME_ID" ]; then
            echo "::warning::Unable to determine an iOS runtime; tests will fall back to default destination."
            exit 0
          fi

          SIM_NAME="zpod-${GITHUB_RUN_ID}-${SAFE_NAME}"
          DEVICE_CANDIDATES=(
            com.apple.CoreSimulator.SimDeviceType.iPhone-16-Pro
            com.apple.CoreSimulator.SimDeviceType.iPhone-16
            com.apple.CoreSimulator.SimDeviceType.iPhone-17-Pro
            com.apple.CoreSimulator.SimDeviceType.iPhone-17
            com.apple.CoreSimulator.SimDeviceType.iPhone-15-Pro
            com.apple.CoreSimulator.SimDeviceType.iPhone-15
            com.apple.CoreSimulator.SimDeviceType.iPhone-14-Pro
            com.apple.CoreSimulator.SimDeviceType.iPhone-14
            com.apple.CoreSimulator.SimDeviceType.iPhone-13-Pro
            com.apple.CoreSimulator.SimDeviceType.iPhone-13
          )

          DEVICE_LIST=$(xcrun simctl list devicetypes)
          SELECTED_DEVICE=""
          UDID=""
          CREATE_LOG=$(mktemp)

          for candidate in "${DEVICE_CANDIDATES[@]}"; do
            if ! printf '%s' "$DEVICE_LIST" | grep -q "$candidate"; then
              continue
            fi
            echo "Attempting to create simulator ${candidate} for runtime ${RUNTIME_ID}"
            set +e
            UDID=$(xcrun simctl create "$SIM_NAME" "$candidate" "$RUNTIME_ID" 2>"$CREATE_LOG")
            status=$?
            set -e
            UDID=$(printf '%s' "$UDID" | tr -d '\r\n')
            if [ $status -eq 0 ] && [ -n "$UDID" ]; then
              SELECTED_DEVICE="$candidate"
              break
            fi
            echo "::warning::Failed to create ${candidate} – $(cat "$CREATE_LOG")"
            UDID=""
          done

          rm -f "$CREATE_LOG"

          if [ -z "$UDID" ]; then
            echo "::warning::Unable to create a dedicated simulator for runtime ${RUNTIME_ID}; tests will fall back to automatic destination."
            exit 0
          fi

          echo "Created simulator ${SIM_NAME} (${UDID}) using device ${SELECTED_DEVICE}"

          echo "Booting simulator ${SIM_NAME} (${UDID})"
          set +e
          xcrun simctl boot "$UDID"
          boot_status=$?
          if [ $boot_status -ne 0 ]; then
            echo "::warning::simctl boot returned status ${boot_status} for ${UDID}"
          fi
          xcrun simctl bootstatus "$UDID" -b
          bootstatus_status=$?
          if [ $bootstatus_status -ne 0 ]; then
            echo "::warning::simctl bootstatus failed for ${UDID} (status ${bootstatus_status})"
          fi
          set -e

          echo "ZPOD_SIMULATOR_UDID=$UDID" >> "$GITHUB_ENV"
          echo "ZPOD_SIMULATOR_NAME=$SIM_NAME" >> "$GITHUB_ENV"
          echo "udid=$UDID" >> "$GITHUB_OUTPUT"
          echo "sim_name=$SIM_NAME" >> "$GITHUB_OUTPUT"


      - name: Pre-warm simulator for unit tests
        if: steps.unit-sim.outputs.udid != ''
        run: |
          set -euo pipefail
          UDID="${{ steps.unit-sim.outputs.udid }}"
          
          echo "Pre-warming simulator services for faster test execution..."
          
          # Wait for SpringBoard to be fully ready
          echo "Waiting for SpringBoard to launch..."
          for j in {1..60}; do
            if xcrun simctl spawn $UDID launchctl list | grep -q com.apple.SpringBoard; then
              break
            fi
            sleep 0.5
          done
          
          # Pre-warm accessibility services (critical for UI testing)
          echo "Initializing accessibility services..."
          xcrun simctl spawn "$UDID" launchctl list com.apple.accessibility.AccessibilityUIServer 2>/dev/null || true
          
          # Wait for accessibility server to be ready
          for j in {1..30}; do
            if xcrun simctl spawn $UDID launchctl list | grep -q com.apple.accessibility; then
              break
            fi
            sleep 0.5
          done
          
          # Small delay to let services stabilize
          sleep 2
          
          echo "✅ Simulator pre-warming complete"

      - name: Download host app artifact
        uses: actions/download-artifact@v4
        with:
          name: host-app
          path: host-app

      - name: Verify and restore host app bundle
        run: |
          set -euo pipefail
          
          # Verify artifact integrity with checksum
          echo "Verifying artifact integrity..."
          cd host-app
          if ! shasum -a 256 -c host-app.tar.gz.sha256; then
            echo "❌ Artifact checksum verification failed"
            exit 1
          fi
          echo "✅ Artifact integrity verified"
          cd ..
          
          # Extract to temporary directory first (atomic operation)
          TEMP_DIR=$(mktemp -d)
          echo "Extracting to temporary directory: $TEMP_DIR"
          tar -xzf host-app/host-app.tar.gz -C "$TEMP_DIR"
          
          # Verify extraction was complete
          if [ ! -d "$TEMP_DIR/zpod.app" ]; then
            echo "❌ Extraction failed or incomplete - zpod.app not found"
            rm -rf "$TEMP_DIR"
            exit 1
          fi
          
          # Create symlink if needed
          if [ ! -f "$TEMP_DIR/zpod.app/zpod" ] && [ -f "$TEMP_DIR/zpod.app/zpod.debug.dylib" ]; then
            echo "Creating symlink: zpod -> zpod.debug.dylib"
            ln -sf zpod.debug.dylib "$TEMP_DIR/zpod.app/zpod"
          fi
          
          # Verify main binary exists
          if [ ! -f "$TEMP_DIR/zpod.app/zpod" ]; then
            echo "❌ Main binary missing after extraction"
            ls -la "$TEMP_DIR/zpod.app/" || true
            rm -rf "$TEMP_DIR"
            exit 1
          fi
          
          # Atomic move to final location
          HOST_DIR="${{ steps.unit-sim.outputs.derived_path }}/Build/Products/Debug-iphonesimulator"
          mkdir -p "$(dirname "$HOST_DIR")"
          mv "$TEMP_DIR" "$HOST_DIR"
          
          echo "✅ Host app bundle restored successfully to $HOST_DIR"

      - name: Run AppSmoke tests
        run: |
          set -euo pipefail
          ./scripts/run-xcode-tests.sh -t AppSmokeTests
        env:
          NSUnbufferedIO: "YES"
          ZPOD_SIMULATOR_UDID: ${{ steps.unit-sim.outputs.udid }}
          ZPOD_DERIVED_DATA_PATH: ${{ steps.unit-sim.outputs.derived_path }}
          ZPOD_TEST_WITHOUT_BUILDING: "1"

      - name: Archive Test Results
        if: always()
        run: |
          set -euo pipefail
          mkdir -p artifacts/AppSmoke
          if ls TestResults >/dev/null 2>&1; then
            find TestResults -maxdepth 1 -mindepth 1 \( -name "TestResults_*.xcresult" -o -name "TestResults_*.log" \) \
              -exec cp -R {} artifacts/AppSmoke/ \;
          fi
          if ls ~/Library/Logs/DiagnosticReports/*.crash >/dev/null 2>&1; then
            cp ~/Library/Logs/DiagnosticReports/*.crash artifacts/AppSmoke/
          fi
      - name: Upload Unit Test Artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-AppSmoke
          path: artifacts/AppSmoke
          if-no-files-found: warn

      - name: Cleanup unit-test simulator
        if: always()
        run: |
          set -euo pipefail
          if [ -n "${{ steps.unit-sim.outputs.udid }}" ]; then
            echo "Cleaning up simulator ${{ steps.unit-sim.outputs.sim_name }} (${{ steps.unit-sim.outputs.udid }})"
            xcrun simctl shutdown "${{ steps.unit-sim.outputs.udid }}" || true
            xcrun simctl delete "${{ steps.unit-sim.outputs.udid }}" || true
          fi
          if [ -n "${{ steps.unit-sim.outputs.derived_path }}" ]; then
            rm -rf "${{ steps.unit-sim.outputs.derived_path }}"
          fi

  integration-tests:
    runs-on: macos-latest
    if: github.event.inputs.matrix == 'ui' || github.event.inputs.matrix == 'all' || github.event_name != 'workflow_dispatch'
    needs:
      - unit-tests
      - package-tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Select Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.4'
      - name: Self-check build script
        run: ./scripts/run-xcode-tests.sh --self-check
      - name: Show Xcode version
        run: xcodebuild -version
      - name: Ensure iOS Simulator runtime is installed
        run: |
          set -euo pipefail
          echo "Checking installed runtimes before download..."
          xcrun simctl list runtimes || true

          HAS_IOS_RUNTIME=$(xcrun simctl list runtimes | grep -c "iOS ") || true
          if [ "$HAS_IOS_RUNTIME" -eq 0 ]; then
            echo "No iOS runtimes found. Attempting to download iOS platform..."
            sudo xcodebuild -runFirstLaunch || true
            if xcodebuild -help | grep -q "-downloadPlatform"; then
              sudo xcodebuild -downloadPlatform iOS || true
            fi
            if [ $(xcrun simctl list runtimes | grep -c "iOS ") -eq 0 ]; then
              echo "Retrying with -downloadAllPlatforms..."
              if xcodebuild -help | grep -q "-downloadAllPlatforms"; then
                sudo xcodebuild -downloadAllPlatforms || true
              fi
            fi
            echo "Runtimes after download attempt:"
            xcrun simctl list runtimes || true
          fi

          if [ $(xcrun simctl list runtimes | grep -c "iOS ") -eq 0 ]; then
            echo "⚠️ No iOS CoreSimulator runtimes available after download attempts. Proceeding with generic simulator fallback."
          fi

      - name: Provision integration simulator & derived data
        id: integration-sim
        run: |
          set -euo pipefail

          SAFE_NAME="Integration"
          DERIVED_PATH="$PWD/tmp_ci/DerivedData/${SAFE_NAME}"

          rm -rf "$DERIVED_PATH"
          mkdir -p "$DERIVED_PATH"
          echo "ZPOD_DERIVED_DATA_PATH=$DERIVED_PATH" >> "$GITHUB_ENV"
          echo "derived_path=$DERIVED_PATH" >> "$GITHUB_OUTPUT"

          RUNTIME_ID=$(xcrun simctl list runtimes -j | python3 -c "import json,sys; runtimes=json.load(sys.stdin).get('runtimes',[]); preferred=[r for r in runtimes if r.get('identifier','').startswith('com.apple.CoreSimulator.SimRuntime.iOS-18') and r.get('isAvailable')]; preferred = preferred or [r for r in runtimes if r.get('platform','')=='iOS' and r.get('isAvailable')]; print(preferred[0]['identifier'] if preferred else '')" || true)

          if [ -z "$RUNTIME_ID" ]; then
            echo "::warning::Unable to determine an iOS runtime; tests will fall back to default destination."
            exit 0
          fi

          SIM_NAME="zpod-${GITHUB_RUN_ID}-${SAFE_NAME}"
          DEVICE_CANDIDATES=(
            com.apple.CoreSimulator.SimDeviceType.iPhone-16-Pro
            com.apple.CoreSimulator.SimDeviceType.iPhone-16
            com.apple.CoreSimulator.SimDeviceType.iPhone-17-Pro
            com.apple.CoreSimulator.SimDeviceType.iPhone-17
            com.apple.CoreSimulator.SimDeviceType.iPhone-15-Pro
            com.apple.CoreSimulator.SimDeviceType.iPhone-15
            com.apple.CoreSimulator.SimDeviceType.iPhone-14-Pro
            com.apple.CoreSimulator.SimDeviceType.iPhone-14
            com.apple.CoreSimulator.SimDeviceType.iPhone-13-Pro
            com.apple.CoreSimulator.SimDeviceType.iPhone-13
          )

          DEVICE_LIST=$(xcrun simctl list devicetypes)
          SELECTED_DEVICE=""
          UDID=""
          CREATE_LOG=$(mktemp)

          for candidate in "${DEVICE_CANDIDATES[@]}"; do
            if ! printf '%s' "$DEVICE_LIST" | grep -q "$candidate"; then
              continue
            fi
            echo "Attempting to create simulator ${candidate} for runtime ${RUNTIME_ID}"
            set +e
            UDID=$(xcrun simctl create "$SIM_NAME" "$candidate" "$RUNTIME_ID" 2>"$CREATE_LOG")
            status=$?
            set -e
            UDID=$(printf '%s' "$UDID" | tr -d '\r\n')
            if [ $status -eq 0 ] && [ -n "$UDID" ]; then
              SELECTED_DEVICE="$candidate"
              break
            fi
            echo "::warning::Failed to create ${candidate} – $(cat "$CREATE_LOG")"
            UDID=""
          done

          rm -f "$CREATE_LOG"

          if [ -z "$UDID" ]; then
            echo "::warning::Unable to create a dedicated simulator for runtime ${RUNTIME_ID}; tests will fall back to automatic destination."
            exit 0
          fi

          echo "Created simulator ${SIM_NAME} (${UDID}) using device ${SELECTED_DEVICE}"

          echo "Booting simulator ${SIM_NAME} (${UDID})"
          set +e
          xcrun simctl boot "$UDID"
          boot_status=$?
          if [ $boot_status -ne 0 ]; then
            echo "::warning::simctl boot returned status ${boot_status} for ${UDID}"
          fi
          xcrun simctl bootstatus "$UDID" -b
          bootstatus_status=$?
          if [ $bootstatus_status -ne 0 ]; then
            echo "::warning::simctl bootstatus failed for ${UDID} (status ${bootstatus_status})"
          fi
          set -e

          echo "ZPOD_SIMULATOR_UDID=$UDID" >> "$GITHUB_ENV"
          echo "ZPOD_SIMULATOR_NAME=$SIM_NAME" >> "$GITHUB_ENV"
          echo "udid=$UDID" >> "$GITHUB_OUTPUT"
          echo "sim_name=$SIM_NAME" >> "$GITHUB_OUTPUT"

      - name: Download host app artifact
        uses: actions/download-artifact@v4
        with:
          name: host-app
          path: host-app

      - name: Verify and restore host app bundle
        run: |
          set -euo pipefail
          
          # Verify artifact integrity with checksum
          echo "Verifying artifact integrity..."
          cd host-app
          if ! shasum -a 256 -c host-app.tar.gz.sha256; then
            echo "❌ Artifact checksum verification failed"
            exit 1
          fi
          echo "✅ Artifact integrity verified"
          cd ..
          
          # Extract to temporary directory first (atomic operation)
          TEMP_DIR=$(mktemp -d)
          echo "Extracting to temporary directory: $TEMP_DIR"
          tar -xzf host-app/host-app.tar.gz -C "$TEMP_DIR"
          
          # Verify extraction was complete
          if [ ! -d "$TEMP_DIR/zpod.app" ]; then
            echo "❌ Extraction failed or incomplete - zpod.app not found"
            rm -rf "$TEMP_DIR"
            exit 1
          fi
          
          # Create symlink if needed
          if [ ! -f "$TEMP_DIR/zpod.app/zpod" ] && [ -f "$TEMP_DIR/zpod.app/zpod.debug.dylib" ]; then
            echo "Creating symlink: zpod -> zpod.debug.dylib"
            ln -sf zpod.debug.dylib "$TEMP_DIR/zpod.app/zpod"
          fi
          
          # Verify main binary exists
          if [ ! -f "$TEMP_DIR/zpod.app/zpod" ]; then
            echo "❌ Main binary missing after extraction"
            ls -la "$TEMP_DIR/zpod.app/" || true
            rm -rf "$TEMP_DIR"
            exit 1
          fi
          
          # Atomic move to final location
          HOST_DIR="${{ steps.integration-sim.outputs.derived_path }}/Build/Products/Debug-iphonesimulator"
          mkdir -p "$(dirname "$HOST_DIR")"
          mv "$TEMP_DIR" "$HOST_DIR"
          
          echo "✅ Host app bundle restored successfully to $HOST_DIR"

      - name: Pre-warm simulator for integration tests
        if: steps.integration-sim.outputs.udid != ''
        run: |
          set -euo pipefail
          UDID="${{ steps.integration-sim.outputs.udid }}"
          
          echo "Pre-warming simulator services for faster test execution..."
          
          # Wait for SpringBoard to be fully ready
          echo "Waiting for SpringBoard to launch..."
          for j in {1..60}; do
            if xcrun simctl spawn $UDID launchctl list | grep -q com.apple.SpringBoard; then
              break
            fi
            sleep 0.5
          done
          
          # Pre-warm accessibility services (critical for UI testing)
          echo "Initializing accessibility services..."
          xcrun simctl spawn "$UDID" launchctl list com.apple.accessibility.AccessibilityUIServer 2>/dev/null || true
          
          # Wait for accessibility server to be ready
          for j in {1..30}; do
            if xcrun simctl spawn $UDID launchctl list | grep -q com.apple.accessibility; then
              break
            fi
            sleep 0.5
          done
          
          # Small delay to let services stabilize
          sleep 2
          
          echo "✅ Simulator pre-warming complete"

      - name: Run Integration Tests
        run: |
          set -euo pipefail
          ./scripts/run-xcode-tests.sh -t IntegrationTests
        env:
          NSUnbufferedIO: "YES"
          UITEST_TIMEOUT_SCALE: "1.5"
          ZPOD_SIMULATOR_UDID: ${{ steps.integration-sim.outputs.udid }}
          ZPOD_DERIVED_DATA_PATH: ${{ steps.integration-sim.outputs.derived_path }}
          ZPOD_TEST_WITHOUT_BUILDING: "1"

      - name: Archive Test Results
        if: always()
        run: |
          set -euo pipefail
          mkdir -p artifacts/Integration
          if ls TestResults >/dev/null 2>&1; then
            find TestResults -maxdepth 1 -mindepth 1 \( -name "TestResults_*.xcresult" -o -name "TestResults_*.log" \) \
              -exec cp -R {} artifacts/Integration/ \;
          fi
          if ls ~/Library/Logs/DiagnosticReports/*.crash >/dev/null 2>&1; then
            cp ~/Library/Logs/DiagnosticReports/*.crash artifacts/Integration/
          fi

      - name: Upload Integration Artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-Integration
          path: artifacts/Integration
          if-no-files-found: warn

      - name: Cleanup integration simulator
        if: always()
        run: |
          set -euo pipefail
          if [ -n "${{ steps.integration-sim.outputs.udid }}" ]; then
            echo "Cleaning up simulator ${{ steps.integration-sim.outputs.sim_name }} (${{ steps.integration-sim.outputs.udid }})"
            xcrun simctl shutdown "${{ steps.integration-sim.outputs.udid }}" || true
            xcrun simctl delete "${{ steps.integration-sim.outputs.udid }}" || true
          fi
          if [ -n "${{ steps.integration-sim.outputs.derived_path }}" ]; then
            rm -rf "${{ steps.integration-sim.outputs.derived_path }}"
          fi

  ui-tests:
    if: github.event.inputs.matrix == 'ui' || github.event.inputs.matrix == 'all' || github.event_name != 'workflow_dispatch'
    needs:
      - unit-tests
      - package-tests
    runs-on: macos-latest
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        include:
          - name: UITests-Navigation
            tests: zpodUITests/CoreUINavigationTests,zpodUITests/EpisodeListUITests
          - name: UITests-ContentDiscovery
            tests: zpodUITests/ContentDiscoveryUITests
          - name: UITests-Playback
            tests: zpodUITests/PlaybackUITests
          - name: UITests-BatchOperations
            tests: zpodUITests/BatchOperationUITests
          - name: UITests-SwipeConfiguration
            tests: zpodUITests/SwipeConfigurationPersistenceUITests,zpodUITests/SwipeConfigurationExecutionUITests,zpodUITests/SwipeConfigurationPresetCyclingUITests,zpodUITests/SwipeConfigurationActionManagementUITests
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Select Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.4'
      - name: Self-check build script
        run: ./scripts/run-xcode-tests.sh --self-check
      - name: Show Xcode version
        run: xcodebuild -version
      - name: Ensure iOS Simulator runtime is installed
        run: |
          set -euo pipefail
          echo "Checking installed runtimes before download..."
          xcrun simctl list runtimes || true

          HAS_IOS_RUNTIME=$(xcrun simctl list runtimes | grep -c "iOS ") || true
          if [ "$HAS_IOS_RUNTIME" -eq 0 ]; then
            echo "No iOS runtimes found. Attempting to download iOS platform..."
            sudo xcodebuild -runFirstLaunch || true
            if xcodebuild -help | grep -q "-downloadPlatform"; then
              sudo xcodebuild -downloadPlatform iOS || true
            fi
            if [ $(xcrun simctl list runtimes | grep -c "iOS ") -eq 0 ]; then
              echo "Retrying with -downloadAllPlatforms..."
              if xcodebuild -help | grep -q "-downloadAllPlatforms"; then
                sudo xcodebuild -downloadAllPlatforms || true
              fi
            fi
            echo "Runtimes after download attempt:"
            xcrun simctl list runtimes || true
          fi

          if [ $(xcrun simctl list runtimes | grep -c "iOS ") -eq 0 ]; then
            echo "⚠️ No iOS CoreSimulator runtimes available after download attempts. Proceeding with generic simulator fallback."
          fi

      - name: Provision dedicated simulator & derived data
        id: provision-sim
        run: |
          set -euo pipefail

          MATRIX_NAME="${{ matrix.name }}"
          SAFE_NAME=$(echo "$MATRIX_NAME" | tr '[:space:]/' '-' | tr -c 'A-Za-z0-9_-.' '-')
          SAFE_NAME="${SAFE_NAME%-}"
          DERIVED_PATH="$PWD/tmp_ci/DerivedData/${SAFE_NAME}"

          rm -rf "$DERIVED_PATH"
          mkdir -p "$DERIVED_PATH"
          echo "ZPOD_DERIVED_DATA_PATH=$DERIVED_PATH" >> "$GITHUB_ENV"
          echo "derived_path=$DERIVED_PATH" >> "$GITHUB_OUTPUT"

          RUNTIME_ID=$(xcrun simctl list runtimes -j | python3 -c "import json,sys; runtimes=json.load(sys.stdin).get('runtimes',[]); preferred=[r for r in runtimes if r.get('identifier','').startswith('com.apple.CoreSimulator.SimRuntime.iOS-18') and r.get('isAvailable')]; preferred = preferred or [r for r in runtimes if r.get('platform','')=='iOS' and r.get('isAvailable')]; print(preferred[0]['identifier'] if preferred else '')" || true)

          if [ -z "$RUNTIME_ID" ]; then
            echo "::warning::Unable to determine an iOS runtime; tests will fall back to default destination."
            exit 0
          fi

          SIM_NAME="zpod-${GITHUB_RUN_ID}-${SAFE_NAME}"
          DEVICE_CANDIDATES=(
            com.apple.CoreSimulator.SimDeviceType.iPhone-16-Pro
            com.apple.CoreSimulator.SimDeviceType.iPhone-16
            com.apple.CoreSimulator.SimDeviceType.iPhone-17-Pro
            com.apple.CoreSimulator.SimDeviceType.iPhone-17
            com.apple.CoreSimulator.SimDeviceType.iPhone-15-Pro
            com.apple.CoreSimulator.SimDeviceType.iPhone-15
            com.apple.CoreSimulator.SimDeviceType.iPhone-14-Pro
            com.apple.CoreSimulator.SimDeviceType.iPhone-14
            com.apple.CoreSimulator.SimDeviceType.iPhone-13-Pro
            com.apple.CoreSimulator.SimDeviceType.iPhone-13
          )

          DEVICE_LIST=$(xcrun simctl list devicetypes)
          SELECTED_DEVICE=""
          UDID=""
          CREATE_LOG=$(mktemp)

          for candidate in "${DEVICE_CANDIDATES[@]}"; do
            if ! printf '%s' "$DEVICE_LIST" | grep -q "$candidate"; then
              continue
            fi
            echo "Attempting to create simulator ${candidate} for runtime ${RUNTIME_ID}"
            set +e
            UDID=$(xcrun simctl create "$SIM_NAME" "$candidate" "$RUNTIME_ID" 2>"$CREATE_LOG")
            status=$?
            set -e
            UDID=$(printf '%s' "$UDID" | tr -d '\r\n')
            if [ $status -eq 0 ] && [ -n "$UDID" ]; then
              SELECTED_DEVICE="$candidate"
              break
            fi
            echo "::warning::Failed to create ${candidate} – $(cat "$CREATE_LOG")"
            UDID=""
          done

          rm -f "$CREATE_LOG"

          if [ -z "$UDID" ]; then
            echo "::warning::Unable to create a dedicated simulator for runtime ${RUNTIME_ID}; tests will fall back to automatic destination."
            exit 0
          fi

          echo "Created simulator ${SIM_NAME} (${UDID}) using device ${SELECTED_DEVICE}"

          echo "Booting simulator ${SIM_NAME} (${UDID})"
          set +e
          xcrun simctl boot "$UDID"
          boot_status=$?
          if [ $boot_status -ne 0 ]; then
            echo "::warning::simctl boot returned status ${boot_status} for ${UDID}"
          fi
          xcrun simctl bootstatus "$UDID" -b
          bootstatus_status=$?
          if [ $bootstatus_status -ne 0 ]; then
            echo "::warning::simctl bootstatus failed for ${UDID} (status ${bootstatus_status})"
          fi
          set -e

          echo "ZPOD_SIMULATOR_UDID=$UDID" >> "$GITHUB_ENV"
          echo "ZPOD_SIMULATOR_NAME=$SIM_NAME" >> "$GITHUB_ENV"
          echo "udid=$UDID" >> "$GITHUB_OUTPUT"
          echo "sim_name=$SIM_NAME" >> "$GITHUB_OUTPUT"

      - name: Download host app artifact
        uses: actions/download-artifact@v4
        with:
          name: host-app
          path: host-app

      - name: Verify and restore host app bundle
        run: |
          set -euo pipefail
          
          # Verify artifact integrity with checksum
          echo "Verifying artifact integrity..."
          cd host-app
          if ! shasum -a 256 -c host-app.tar.gz.sha256; then
            echo "❌ Artifact checksum verification failed"
            exit 1
          fi
          echo "✅ Artifact integrity verified"
          cd ..
          
          # Extract to temporary directory first (atomic operation)
          TEMP_DIR=$(mktemp -d)
          echo "Extracting to temporary directory: $TEMP_DIR"
          tar -xzf host-app/host-app.tar.gz -C "$TEMP_DIR"
          
          # Verify extraction was complete
          if [ ! -d "$TEMP_DIR/zpod.app" ]; then
            echo "❌ Extraction failed or incomplete - zpod.app not found"
            rm -rf "$TEMP_DIR"
            exit 1
          fi
          
          # Create symlink if needed
          if [ ! -f "$TEMP_DIR/zpod.app/zpod" ] && [ -f "$TEMP_DIR/zpod.app/zpod.debug.dylib" ]; then
            echo "Creating symlink: zpod -> zpod.debug.dylib"
            ln -sf zpod.debug.dylib "$TEMP_DIR/zpod.app/zpod"
          fi
          
          # Verify main binary exists
          if [ ! -f "$TEMP_DIR/zpod.app/zpod" ]; then
            echo "❌ Main binary missing after extraction"
            ls -la "$TEMP_DIR/zpod.app/" || true
            rm -rf "$TEMP_DIR"
            exit 1
          fi
          
          # Atomic move to final location
          HOST_DIR="${{ steps.provision-sim.outputs.derived_path }}/Build/Products/Debug-iphonesimulator"
          mkdir -p "$(dirname "$HOST_DIR")"
          mv "$TEMP_DIR" "$HOST_DIR"
          
          echo "✅ Host app bundle restored successfully to $HOST_DIR"

      - name: Pre-warm simulator for UI tests
        if: steps.provision-sim.outputs.udid != ''
        run: |
          set -euo pipefail
          UDID="${{ steps.provision-sim.outputs.udid }}"
          
          echo "Pre-warming simulator services for faster test execution..."
          
          # Wait for SpringBoard to be fully ready
          echo "Waiting for SpringBoard to launch..."
          for j in {1..60}; do
            if xcrun simctl spawn $UDID launchctl list | grep -q com.apple.SpringBoard; then
              break
            fi
            sleep 0.5
          done
          
          # Pre-warm accessibility services (critical for UI testing)
          echo "Initializing accessibility services..."
          xcrun simctl spawn "$UDID" launchctl list com.apple.accessibility.AccessibilityUIServer 2>/dev/null || true
          
          # Wait for accessibility server to be ready
          for j in {1..30}; do
            if xcrun simctl spawn $UDID launchctl list | grep -q com.apple.accessibility; then
              break
            fi
            sleep 0.5
          done
          
          # Enable software keyboard (critical for keyboard tests)
          echo "Configuring keyboard settings..."
          xcrun simctl spawn "$UDID" defaults write com.apple.Preferences AutomaticMinimizationEnabled -bool false 2>/dev/null || true
          
          # Small delay to let services stabilize
          sleep 2
          
          echo "✅ Simulator pre-warming complete"

      - name: Run ${{ matrix.name }} Tests
        run: |
          set -euo pipefail
          ./scripts/run-xcode-tests.sh -t ${{ matrix.tests }}
        env:
          NSUnbufferedIO: "YES"
          UITEST_TIMEOUT_SCALE: "1.5"
          ZPOD_SIMULATOR_UDID: ${{ steps.provision-sim.outputs.udid }}
          ZPOD_DERIVED_DATA_PATH: ${{ steps.provision-sim.outputs.derived_path }}
          ZPOD_TEST_WITHOUT_BUILDING: "1"
      - name: Archive Test Results
        if: always()
        run: |
          set -euo pipefail
          mkdir -p artifacts/${{ matrix.name }}
          if ls TestResults >/dev/null 2>&1; then
            find TestResults -maxdepth 1 -mindepth 1 \( -name "TestResults_*.xcresult" -o -name "TestResults_*.log" \) \
              -exec cp -R {} artifacts/${{ matrix.name }}/ \;
          fi
          if ls ~/Library/Logs/DiagnosticReports/*.crash >/dev/null 2>&1; then
            cp ~/Library/Logs/DiagnosticReports/*.crash artifacts/${{ matrix.name }}/
          fi
      - name: Upload Test Artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-${{ matrix.name }}
          path: artifacts/${{ matrix.name }}
          if-no-files-found: warn

      - name: Cleanup dedicated simulator
        if: always()
        run: |
          set -euo pipefail
          if [ -n "${{ steps.provision-sim.outputs.udid }}" ]; then
            echo "Cleaning up simulator ${{ steps.provision-sim.outputs.sim_name }} (${{ steps.provision-sim.outputs.udid }})"
            xcrun simctl shutdown "${{ steps.provision-sim.outputs.udid }}" || true
            xcrun simctl delete "${{ steps.provision-sim.outputs.udid }}" || true
          fi
          if [ -n "${{ steps.provision-sim.outputs.derived_path }}" ]; then
            rm -rf "${{ steps.provision-sim.outputs.derived_path }}"
          fi

  package-tests:
    runs-on: macos-latest
    if: github.event.inputs.matrix == 'packages' || github.event.inputs.matrix == 'all' || github.event_name != 'workflow_dispatch'
    needs: preflight
    strategy:
      fail-fast: false
      matrix:
        package:
          [CoreModels, SharedUtilities, Persistence, FeedParsing, Networking, SettingsDomain,
           SearchDomain, RecommendationDomain, PlaybackEngine, LibraryFeature, PlayerFeature,
           DiscoverFeature, PlaylistFeature, TestSupport]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Select Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.4'
      - name: Self-check build script
        run: ./scripts/run-xcode-tests.sh --self-check
      - name: Show Xcode version
        run: xcodebuild -version
      - name: Run ${{ matrix.package }} Package Tests
        run: |
          set -euo pipefail
          ./scripts/run-xcode-tests.sh -t ${{ matrix.package }}
        env:
          NSUnbufferedIO: "YES"
      - name: Archive Test Results
        if: always()
        run: |
          set -euo pipefail
          mkdir -p artifacts/${{ matrix.package }}
          if ls TestResults >/dev/null 2>&1; then
            find TestResults -maxdepth 1 -mindepth 1 \( -name "TestResults_*.xcresult" -o -name "TestResults_*.log" \) \
              -exec cp -R {} artifacts/${{ matrix.package }}/ \;
          fi
      - name: Upload Test Artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-package-${{ matrix.package }}
          path: artifacts/${{ matrix.package }}
          if-no-files-found: warn

  syntax-linux:
    runs-on: ubuntu-latest
    if: github.event.inputs.matrix == 'linux' || github.event.inputs.matrix == 'all' || github.event_name != 'workflow_dispatch'
    needs: preflight
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Shell self-check
        run: ./scripts/run-xcode-tests.sh --self-check
      - name: Swift syntax verification
        run: ./scripts/run-xcode-tests.sh -s
      - name: Swift lint
        run: ./scripts/run-xcode-tests.sh -l
